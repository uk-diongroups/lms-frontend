{"ast":null,"code":"// import store from 'redux/store';\n// import { CONTINUE_LOADING } from 'redux/types/message.type';\n// /**\n//  * @function\n//  * @param {string} loadType - Defines the loadType , as functions are uniques , load types are unique\n//  * @returns - Returns if the loadType is in the loadTypes array\n//  */\n// export const isLoading = (loadType) => {\n// \tconst loadTypes = store.getState().loader.loadTypes;\n// \t//Dispatch if array is not empty so as to enable component rerender\n// \tif (loadTypes.length) store.dispatch({ type: CONTINUE_LOADING });\n// \treturn loadTypes.includes(loadType);\n// };","map":{"version":3,"sources":["/Users/mac/Documents/ukdiononlinelearning/src/util/loading.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// import store from 'redux/store';\n// import { CONTINUE_LOADING } from 'redux/types/message.type';\n\n// /**\n//  * @function\n//  * @param {string} loadType - Defines the loadType , as functions are uniques , load types are unique\n//  * @returns - Returns if the loadType is in the loadTypes array\n//  */\n\n// export const isLoading = (loadType) => {\n// \tconst loadTypes = store.getState().loader.loadTypes;\n// \t//Dispatch if array is not empty so as to enable component rerender\n// \tif (loadTypes.length) store.dispatch({ type: CONTINUE_LOADING });\n\n// \treturn loadTypes.includes(loadType);\n// };\n"]},"metadata":{},"sourceType":"module"}